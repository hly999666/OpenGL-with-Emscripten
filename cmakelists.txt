cmake_minimum_required(VERSION 3.12)

project(opengl_test)
set(EXCE_NAME "opengl_test_0")
#set(glm_DIR "${PROJECT_SOURCE_DIR}/lib/glm/cmake/glm")
#find_package(glm CONFIG REQUIRED)

#set(GLM_DIR  "${CMAKE_SOURCE_DIR}externs/glm/cmake/glm")
set(USE_IMGUI ON)
set(USE_IMPLOT ON)

if(BUILDWASM)
#set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/externs/")
#set(GLM_DIR "${CMAKE_SOURCE_DIR}/externs/glm/cmake/glm")
#message("${GLM_DIR}")
endif()

#find_package(GLM REQUIRED)
#message(STATUS "GLM included at ${GLM_INCLUDE_DIR}")
set(SRC 
#src/main_gl_c7_Textures.cpp
src/main_filesystem.cpp
#src/main_fractalTree2D_Basic.cpp
)

#include my files
set(SRC 
    "${SRC}"
)
if(USE_IMGUI)
set(IMGUI_SRC
    externs/imgui/imgui.cpp
    externs/imgui/imgui_draw.cpp
    externs/imgui/imgui_widgets.cpp
    externs/imgui/imgui_demo.cpp
    externs/imgui/imgui_impl_glfw.cpp
    externs/imgui/imgui_impl_opengl3.cpp
 
) 
endif()

 if(USE_IMPLOT)
set(IMPLOT_SRC
 externs/implot/implot.h
  externs/implot/implot_internal.h
    externs/implot/implot.cpp
    externs/implot/implot_demo.cpp
    externs/implot/implot_items.cpp
) 
endif()
#add_subdirectory(externs/glm/glm)

message("${SRC}")
#find_package(OpenGL REQUIRED)

if(BUILDWASM)
set(CMAKE_EXECUTABLE_SUFFIX ".html")
else()
find_package(GLEW REQUIRED)
#add_subdirectory(lib/glad)
find_package(glfw3 CONFIG REQUIRED)
find_package(Boost REQUIRED filesystem)
endif()
#add_subdirectory(lib/imgui)
add_subdirectory(lib/05_dir)
add_subdirectory(lib/lyh_gl_lib)
add_subdirectory(lib/DDON)
add_executable(${EXCE_NAME} 
    ${SRC} 
    ${IMGUI_SRC}
    ${IMPLOT_SRC}
     ) 

#target_link_libraries(${EXCE_NAME}  PRIVATE imgui)
if(BUILDWASM)

else()
    #target_link_libraries(${EXCE_NAME} PRIVATE ${OPENGL_gl_LIBRARY})
    #target_link_libraries(${EXCE_NAME}  PRIVATE glm)
    target_link_libraries(${EXCE_NAME}  PRIVATE GLEW::GLEW)
    target_link_libraries(${EXCE_NAME}  PRIVATE glfw)
    target_link_libraries(${EXCE_NAME} PRIVATE Boost::boost Boost::filesystem)
   endif()
#target_link_libraries(${EXCE_NAME}  PRIVATE glm)  
target_link_libraries(${EXCE_NAME}  PRIVATE Operator_OverLoading)
target_link_libraries(${EXCE_NAME}  PRIVATE lyh_gl_lib)
target_link_libraries(${EXCE_NAME}  PRIVATE DDoN)
 #target_link_libraries(${EXCE_NAME}  PRIVATE glm)
if(BUILDWASM)
set_target_properties(${EXCE_NAME}  PROPERTIES LINK_FLAGS  "-O2 -pthread  -msimd128 -s  USE_WEBGL2=2 -s USE_GLFW=3  -s WASM=1 -std=c++11 -s USE_PTHREADS=1 -Wl,--shared-memory,--no-check-features  --preload-file  res    --shell-file html/shell_minimal.html")
  file(COPY "res" DESTINATION ${CMAKE_BINARY_DIR})
else()
#set_property(TARGET ${EXCE_NAME}   PROPERTY CXX_STANDARD 11)
  file(COPY "res" DESTINATION ${CMAKE_BINARY_DIR})

 target_compile_options(${EXCE_NAME} PRIVATE -mavx)

endif()




